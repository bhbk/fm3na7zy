//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bhbk.Lib.Aurora.Data_EF6.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AuroraEntities_EF6 : DbContext
    {
        public AuroraEntities_EF6()
            : base("name=AuroraEntities_EF6")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Ambassador_EF> Ambassador_EF { get; set; }
        public virtual DbSet<Network_EF> Network_EF { get; set; }
        public virtual DbSet<PrivateKey_EF> PrivateKey_EF { get; set; }
        public virtual DbSet<PublicKey_EF> PublicKey_EF { get; set; }
        public virtual DbSet<Setting_EF> Setting_EF { get; set; }
        public virtual DbSet<Login_EF> Login_EF { get; set; }
        public virtual DbSet<Alert_EF> Alert_EF { get; set; }
        public virtual DbSet<File_EF> File_EF { get; set; }
        public virtual DbSet<Folder_EF> Folder_EF { get; set; }
        public virtual DbSet<Session_EF> Session_EF { get; set; }
        public virtual DbSet<LoginUsage_EF> LoginUsage_EF { get; set; }
        public virtual DbSet<FileSystem_EF> FileSystem_EF { get; set; }
        public virtual DbSet<FileSystemLogin_EF> FileSystemLogin_EF { get; set; }
        public virtual DbSet<FileSystemUsage_EF> FileSystemUsage_EF { get; set; }
        public virtual DbSet<FileSystemType_EF> FileSystemType_EF { get; set; }
        public virtual DbSet<HashAlgorithmType_EF> HashAlgorithmType_EF { get; set; }
        public virtual DbSet<KeyAlgorithmType_EF> KeyAlgorithmType_EF { get; set; }
        public virtual DbSet<LoginAuthType_EF> LoginAuthType_EF { get; set; }
        public virtual DbSet<LoginDebugType_EF> LoginDebugType_EF { get; set; }
        public virtual DbSet<PrivateKeyFormatType_EF> PrivateKeyFormatType_EF { get; set; }
        public virtual DbSet<PublicKeyFormatType_EF> PublicKeyFormatType_EF { get; set; }
        public virtual DbSet<PublicKeySignatureType_EF> PublicKeySignatureType_EF { get; set; }
        public virtual DbSet<NetworkActionType_EF> NetworkActionType_EF { get; set; }
        public virtual DbSet<SmbAuthType_EF> SmbAuthType_EF { get; set; }
    
        public virtual ObjectResult<usp_Ambassador_Delete_Result> usp_Ambassador_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Ambassador_Delete_Result>("usp_Ambassador_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Ambassador_Insert_Result> usp_Ambassador_Insert(string userPrincipalName, string encryptedPass, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var userPrincipalNameParameter = userPrincipalName != null ?
                new ObjectParameter("UserPrincipalName", userPrincipalName) :
                new ObjectParameter("UserPrincipalName", typeof(string));
    
            var encryptedPassParameter = encryptedPass != null ?
                new ObjectParameter("EncryptedPass", encryptedPass) :
                new ObjectParameter("EncryptedPass", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Ambassador_Insert_Result>("usp_Ambassador_Insert", userPrincipalNameParameter, encryptedPassParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Ambassador_Update_Result> usp_Ambassador_Update(Nullable<System.Guid> id, string userPrincipalName, string encryptedPass, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var userPrincipalNameParameter = userPrincipalName != null ?
                new ObjectParameter("UserPrincipalName", userPrincipalName) :
                new ObjectParameter("UserPrincipalName", typeof(string));
    
            var encryptedPassParameter = encryptedPass != null ?
                new ObjectParameter("EncryptedPass", encryptedPass) :
                new ObjectParameter("EncryptedPass", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Ambassador_Update_Result>("usp_Ambassador_Update", idParameter, userPrincipalNameParameter, encryptedPassParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Network_Delete_Result> usp_Network_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Network_Delete_Result>("usp_Network_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Network_Insert_Result> usp_Network_Insert(Nullable<System.Guid> userId, Nullable<int> sequenceId, string address, Nullable<int> actionTypeId, Nullable<bool> isEnabled, Nullable<bool> isDeletable, string comment)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var sequenceIdParameter = sequenceId.HasValue ?
                new ObjectParameter("SequenceId", sequenceId) :
                new ObjectParameter("SequenceId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var actionTypeIdParameter = actionTypeId.HasValue ?
                new ObjectParameter("ActionTypeId", actionTypeId) :
                new ObjectParameter("ActionTypeId", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Network_Insert_Result>("usp_Network_Insert", userIdParameter, sequenceIdParameter, addressParameter, actionTypeIdParameter, isEnabledParameter, isDeletableParameter, commentParameter);
        }
    
        public virtual ObjectResult<usp_Network_Update_Result> usp_Network_Update(Nullable<System.Guid> id, Nullable<int> sequenceId, string address, Nullable<int> actionTypeId, Nullable<bool> isEnabled, Nullable<bool> isDeletable, string comment)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var sequenceIdParameter = sequenceId.HasValue ?
                new ObjectParameter("SequenceId", sequenceId) :
                new ObjectParameter("SequenceId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var actionTypeIdParameter = actionTypeId.HasValue ?
                new ObjectParameter("ActionTypeId", actionTypeId) :
                new ObjectParameter("ActionTypeId", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Network_Update_Result>("usp_Network_Update", idParameter, sequenceIdParameter, addressParameter, actionTypeIdParameter, isEnabledParameter, isDeletableParameter, commentParameter);
        }
    
        public virtual ObjectResult<usp_PrivateKey_Delete_Result> usp_PrivateKey_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrivateKey_Delete_Result>("usp_PrivateKey_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_PrivateKey_Insert_Result> usp_PrivateKey_Insert(Nullable<System.Guid> id, Nullable<System.Guid> userId, Nullable<System.Guid> publicKeyId, string keyValue, Nullable<int> keyAlgorithmId, Nullable<int> keyFormatId, string encryptedPass, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var publicKeyIdParameter = publicKeyId.HasValue ?
                new ObjectParameter("PublicKeyId", publicKeyId) :
                new ObjectParameter("PublicKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgorithmIdParameter = keyAlgorithmId.HasValue ?
                new ObjectParameter("KeyAlgorithmId", keyAlgorithmId) :
                new ObjectParameter("KeyAlgorithmId", typeof(int));
    
            var keyFormatIdParameter = keyFormatId.HasValue ?
                new ObjectParameter("KeyFormatId", keyFormatId) :
                new ObjectParameter("KeyFormatId", typeof(int));
    
            var encryptedPassParameter = encryptedPass != null ?
                new ObjectParameter("EncryptedPass", encryptedPass) :
                new ObjectParameter("EncryptedPass", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrivateKey_Insert_Result>("usp_PrivateKey_Insert", idParameter, userIdParameter, publicKeyIdParameter, keyValueParameter, keyAlgorithmIdParameter, keyFormatIdParameter, encryptedPassParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_PrivateKey_Update_Result> usp_PrivateKey_Update(Nullable<System.Guid> id, Nullable<System.Guid> publicKeyId, string keyValue, Nullable<int> keyAlgorithmId, Nullable<int> keyFormatId, string encryptedPass, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var publicKeyIdParameter = publicKeyId.HasValue ?
                new ObjectParameter("PublicKeyId", publicKeyId) :
                new ObjectParameter("PublicKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgorithmIdParameter = keyAlgorithmId.HasValue ?
                new ObjectParameter("KeyAlgorithmId", keyAlgorithmId) :
                new ObjectParameter("KeyAlgorithmId", typeof(int));
    
            var keyFormatIdParameter = keyFormatId.HasValue ?
                new ObjectParameter("KeyFormatId", keyFormatId) :
                new ObjectParameter("KeyFormatId", typeof(int));
    
            var encryptedPassParameter = encryptedPass != null ?
                new ObjectParameter("EncryptedPass", encryptedPass) :
                new ObjectParameter("EncryptedPass", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrivateKey_Update_Result>("usp_PrivateKey_Update", idParameter, publicKeyIdParameter, keyValueParameter, keyAlgorithmIdParameter, keyFormatIdParameter, encryptedPassParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_PublicKey_Delete_Result> usp_PublicKey_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PublicKey_Delete_Result>("usp_PublicKey_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_PublicKey_Insert_Result> usp_PublicKey_Insert(Nullable<System.Guid> id, Nullable<System.Guid> userId, Nullable<System.Guid> privateKeyId, string keyValue, Nullable<int> keyAlgorithmId, Nullable<int> keyFormatId, string sigValue, Nullable<int> sigAlgo, string comment, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var privateKeyIdParameter = privateKeyId.HasValue ?
                new ObjectParameter("PrivateKeyId", privateKeyId) :
                new ObjectParameter("PrivateKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgorithmIdParameter = keyAlgorithmId.HasValue ?
                new ObjectParameter("KeyAlgorithmId", keyAlgorithmId) :
                new ObjectParameter("KeyAlgorithmId", typeof(int));
    
            var keyFormatIdParameter = keyFormatId.HasValue ?
                new ObjectParameter("KeyFormatId", keyFormatId) :
                new ObjectParameter("KeyFormatId", typeof(int));
    
            var sigValueParameter = sigValue != null ?
                new ObjectParameter("SigValue", sigValue) :
                new ObjectParameter("SigValue", typeof(string));
    
            var sigAlgoParameter = sigAlgo.HasValue ?
                new ObjectParameter("SigAlgo", sigAlgo) :
                new ObjectParameter("SigAlgo", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PublicKey_Insert_Result>("usp_PublicKey_Insert", idParameter, userIdParameter, privateKeyIdParameter, keyValueParameter, keyAlgorithmIdParameter, keyFormatIdParameter, sigValueParameter, sigAlgoParameter, commentParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_PublicKey_Update_Result> usp_PublicKey_Update(Nullable<System.Guid> id, Nullable<System.Guid> privateKeyId, string keyValue, Nullable<int> keyAlgorithmId, Nullable<int> keyFormatId, string sigValue, Nullable<int> sigAlgorithmId, string comment, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var privateKeyIdParameter = privateKeyId.HasValue ?
                new ObjectParameter("PrivateKeyId", privateKeyId) :
                new ObjectParameter("PrivateKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgorithmIdParameter = keyAlgorithmId.HasValue ?
                new ObjectParameter("KeyAlgorithmId", keyAlgorithmId) :
                new ObjectParameter("KeyAlgorithmId", typeof(int));
    
            var keyFormatIdParameter = keyFormatId.HasValue ?
                new ObjectParameter("KeyFormatId", keyFormatId) :
                new ObjectParameter("KeyFormatId", typeof(int));
    
            var sigValueParameter = sigValue != null ?
                new ObjectParameter("SigValue", sigValue) :
                new ObjectParameter("SigValue", typeof(string));
    
            var sigAlgorithmIdParameter = sigAlgorithmId.HasValue ?
                new ObjectParameter("SigAlgorithmId", sigAlgorithmId) :
                new ObjectParameter("SigAlgorithmId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PublicKey_Update_Result>("usp_PublicKey_Update", idParameter, privateKeyIdParameter, keyValueParameter, keyAlgorithmIdParameter, keyFormatIdParameter, sigValueParameter, sigAlgorithmIdParameter, commentParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Setting_Delete_Result> usp_Setting_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Setting_Delete_Result>("usp_Setting_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Setting_Insert_Result> usp_Setting_Insert(Nullable<System.Guid> userId, string configKey, string configValue, Nullable<bool> isDeletable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var configKeyParameter = configKey != null ?
                new ObjectParameter("ConfigKey", configKey) :
                new ObjectParameter("ConfigKey", typeof(string));
    
            var configValueParameter = configValue != null ?
                new ObjectParameter("ConfigValue", configValue) :
                new ObjectParameter("ConfigValue", typeof(string));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Setting_Insert_Result>("usp_Setting_Insert", userIdParameter, configKeyParameter, configValueParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Setting_Update_Result> usp_Setting_Update(Nullable<System.Guid> id, string configKey, string configValue, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var configKeyParameter = configKey != null ?
                new ObjectParameter("ConfigKey", configKey) :
                new ObjectParameter("ConfigKey", typeof(string));
    
            var configValueParameter = configValue != null ?
                new ObjectParameter("ConfigValue", configValue) :
                new ObjectParameter("ConfigValue", typeof(string));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Setting_Update_Result>("usp_Setting_Update", idParameter, configKeyParameter, configValueParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Login_Delete_Result> usp_Login_Delete(Nullable<System.Guid> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Login_Delete_Result>("usp_Login_Delete", userIdParameter);
        }
    
        public virtual ObjectResult<usp_Login_Insert_Result> usp_Login_Insert(Nullable<System.Guid> userId, string userName, Nullable<int> authTypeId, Nullable<bool> isPasswordRequired, Nullable<bool> isPublicKeyRequired, string encryptedPass, string comment, Nullable<int> debugTypeId, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var authTypeIdParameter = authTypeId.HasValue ?
                new ObjectParameter("AuthTypeId", authTypeId) :
                new ObjectParameter("AuthTypeId", typeof(int));
    
            var isPasswordRequiredParameter = isPasswordRequired.HasValue ?
                new ObjectParameter("IsPasswordRequired", isPasswordRequired) :
                new ObjectParameter("IsPasswordRequired", typeof(bool));
    
            var isPublicKeyRequiredParameter = isPublicKeyRequired.HasValue ?
                new ObjectParameter("IsPublicKeyRequired", isPublicKeyRequired) :
                new ObjectParameter("IsPublicKeyRequired", typeof(bool));
    
            var encryptedPassParameter = encryptedPass != null ?
                new ObjectParameter("EncryptedPass", encryptedPass) :
                new ObjectParameter("EncryptedPass", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var debugTypeIdParameter = debugTypeId.HasValue ?
                new ObjectParameter("DebugTypeId", debugTypeId) :
                new ObjectParameter("DebugTypeId", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Login_Insert_Result>("usp_Login_Insert", userIdParameter, userNameParameter, authTypeIdParameter, isPasswordRequiredParameter, isPublicKeyRequiredParameter, encryptedPassParameter, commentParameter, debugTypeIdParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Login_Update_Result> usp_Login_Update(Nullable<System.Guid> userId, string userName, Nullable<int> authTypeId, Nullable<bool> isPasswordRequired, Nullable<bool> isPublicKeyRequired, string encryptedPass, string comment, Nullable<int> debugTypeId, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var authTypeIdParameter = authTypeId.HasValue ?
                new ObjectParameter("AuthTypeId", authTypeId) :
                new ObjectParameter("AuthTypeId", typeof(int));
    
            var isPasswordRequiredParameter = isPasswordRequired.HasValue ?
                new ObjectParameter("IsPasswordRequired", isPasswordRequired) :
                new ObjectParameter("IsPasswordRequired", typeof(bool));
    
            var isPublicKeyRequiredParameter = isPublicKeyRequired.HasValue ?
                new ObjectParameter("IsPublicKeyRequired", isPublicKeyRequired) :
                new ObjectParameter("IsPublicKeyRequired", typeof(bool));
    
            var encryptedPassParameter = encryptedPass != null ?
                new ObjectParameter("EncryptedPass", encryptedPass) :
                new ObjectParameter("EncryptedPass", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var debugTypeIdParameter = debugTypeId.HasValue ?
                new ObjectParameter("DebugTypeId", debugTypeId) :
                new ObjectParameter("DebugTypeId", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Login_Update_Result>("usp_Login_Update", userIdParameter, userNameParameter, authTypeIdParameter, isPasswordRequiredParameter, isPublicKeyRequiredParameter, encryptedPassParameter, commentParameter, debugTypeIdParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Alert_Delete_Result> usp_Alert_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Alert_Delete_Result>("usp_Alert_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Alert_Insert_Result> usp_Alert_Insert(Nullable<System.Guid> userId, Nullable<bool> onDelete, Nullable<bool> onDownload, Nullable<bool> onUpload, string toDisplayName, string toEmailAddress, string toPhoneNumber, Nullable<bool> isEnabled, string comment)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var onDeleteParameter = onDelete.HasValue ?
                new ObjectParameter("OnDelete", onDelete) :
                new ObjectParameter("OnDelete", typeof(bool));
    
            var onDownloadParameter = onDownload.HasValue ?
                new ObjectParameter("OnDownload", onDownload) :
                new ObjectParameter("OnDownload", typeof(bool));
    
            var onUploadParameter = onUpload.HasValue ?
                new ObjectParameter("OnUpload", onUpload) :
                new ObjectParameter("OnUpload", typeof(bool));
    
            var toDisplayNameParameter = toDisplayName != null ?
                new ObjectParameter("ToDisplayName", toDisplayName) :
                new ObjectParameter("ToDisplayName", typeof(string));
    
            var toEmailAddressParameter = toEmailAddress != null ?
                new ObjectParameter("ToEmailAddress", toEmailAddress) :
                new ObjectParameter("ToEmailAddress", typeof(string));
    
            var toPhoneNumberParameter = toPhoneNumber != null ?
                new ObjectParameter("ToPhoneNumber", toPhoneNumber) :
                new ObjectParameter("ToPhoneNumber", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Alert_Insert_Result>("usp_Alert_Insert", userIdParameter, onDeleteParameter, onDownloadParameter, onUploadParameter, toDisplayNameParameter, toEmailAddressParameter, toPhoneNumberParameter, isEnabledParameter, commentParameter);
        }
    
        public virtual ObjectResult<usp_Alert_Update_Result> usp_Alert_Update(Nullable<System.Guid> id, Nullable<bool> onDelete, Nullable<bool> onDownload, Nullable<bool> onUpload, string toDisplayName, string toEmailAddress, string toPhoneNumber, Nullable<bool> isEnabled, string comment)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var onDeleteParameter = onDelete.HasValue ?
                new ObjectParameter("OnDelete", onDelete) :
                new ObjectParameter("OnDelete", typeof(bool));
    
            var onDownloadParameter = onDownload.HasValue ?
                new ObjectParameter("OnDownload", onDownload) :
                new ObjectParameter("OnDownload", typeof(bool));
    
            var onUploadParameter = onUpload.HasValue ?
                new ObjectParameter("OnUpload", onUpload) :
                new ObjectParameter("OnUpload", typeof(bool));
    
            var toDisplayNameParameter = toDisplayName != null ?
                new ObjectParameter("ToDisplayName", toDisplayName) :
                new ObjectParameter("ToDisplayName", typeof(string));
    
            var toEmailAddressParameter = toEmailAddress != null ?
                new ObjectParameter("ToEmailAddress", toEmailAddress) :
                new ObjectParameter("ToEmailAddress", typeof(string));
    
            var toPhoneNumberParameter = toPhoneNumber != null ?
                new ObjectParameter("ToPhoneNumber", toPhoneNumber) :
                new ObjectParameter("ToPhoneNumber", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Alert_Update_Result>("usp_Alert_Update", idParameter, onDeleteParameter, onDownloadParameter, onUploadParameter, toDisplayNameParameter, toEmailAddressParameter, toPhoneNumberParameter, isEnabledParameter, commentParameter);
        }
    
        public virtual ObjectResult<usp_File_Delete_Result> usp_File_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_File_Delete_Result>("usp_File_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_File_Insert_Result> usp_File_Insert(Nullable<System.Guid> fileSystemId, Nullable<System.Guid> folderId, string virtualName, Nullable<bool> isReadOnly, string realPath, string realFileName, Nullable<long> realFileSize, Nullable<int> hashTypeId, string hashValue, Nullable<System.Guid> creatorId)
        {
            var fileSystemIdParameter = fileSystemId.HasValue ?
                new ObjectParameter("FileSystemId", fileSystemId) :
                new ObjectParameter("FileSystemId", typeof(System.Guid));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            var realPathParameter = realPath != null ?
                new ObjectParameter("RealPath", realPath) :
                new ObjectParameter("RealPath", typeof(string));
    
            var realFileNameParameter = realFileName != null ?
                new ObjectParameter("RealFileName", realFileName) :
                new ObjectParameter("RealFileName", typeof(string));
    
            var realFileSizeParameter = realFileSize.HasValue ?
                new ObjectParameter("RealFileSize", realFileSize) :
                new ObjectParameter("RealFileSize", typeof(long));
    
            var hashTypeIdParameter = hashTypeId.HasValue ?
                new ObjectParameter("HashTypeId", hashTypeId) :
                new ObjectParameter("HashTypeId", typeof(int));
    
            var hashValueParameter = hashValue != null ?
                new ObjectParameter("HashValue", hashValue) :
                new ObjectParameter("HashValue", typeof(string));
    
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("CreatorId", creatorId) :
                new ObjectParameter("CreatorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_File_Insert_Result>("usp_File_Insert", fileSystemIdParameter, folderIdParameter, virtualNameParameter, isReadOnlyParameter, realPathParameter, realFileNameParameter, realFileSizeParameter, hashTypeIdParameter, hashValueParameter, creatorIdParameter);
        }
    
        public virtual ObjectResult<usp_File_Update_Result> usp_File_Update(Nullable<System.Guid> id, Nullable<System.Guid> folderId, string virtualName, Nullable<bool> isReadOnly, string realPath, string realFileName, Nullable<long> realFileSize, Nullable<int> hashTypeId, string hashValue, Nullable<System.DateTimeOffset> lastAccessedUtc, Nullable<System.DateTimeOffset> lastUpdatedUtc, Nullable<System.DateTimeOffset> lastVerifiedUtc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            var realPathParameter = realPath != null ?
                new ObjectParameter("RealPath", realPath) :
                new ObjectParameter("RealPath", typeof(string));
    
            var realFileNameParameter = realFileName != null ?
                new ObjectParameter("RealFileName", realFileName) :
                new ObjectParameter("RealFileName", typeof(string));
    
            var realFileSizeParameter = realFileSize.HasValue ?
                new ObjectParameter("RealFileSize", realFileSize) :
                new ObjectParameter("RealFileSize", typeof(long));
    
            var hashTypeIdParameter = hashTypeId.HasValue ?
                new ObjectParameter("HashTypeId", hashTypeId) :
                new ObjectParameter("HashTypeId", typeof(int));
    
            var hashValueParameter = hashValue != null ?
                new ObjectParameter("HashValue", hashValue) :
                new ObjectParameter("HashValue", typeof(string));
    
            var lastAccessedUtcParameter = lastAccessedUtc.HasValue ?
                new ObjectParameter("LastAccessedUtc", lastAccessedUtc) :
                new ObjectParameter("LastAccessedUtc", typeof(System.DateTimeOffset));
    
            var lastUpdatedUtcParameter = lastUpdatedUtc.HasValue ?
                new ObjectParameter("LastUpdatedUtc", lastUpdatedUtc) :
                new ObjectParameter("LastUpdatedUtc", typeof(System.DateTimeOffset));
    
            var lastVerifiedUtcParameter = lastVerifiedUtc.HasValue ?
                new ObjectParameter("LastVerifiedUtc", lastVerifiedUtc) :
                new ObjectParameter("LastVerifiedUtc", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_File_Update_Result>("usp_File_Update", idParameter, folderIdParameter, virtualNameParameter, isReadOnlyParameter, realPathParameter, realFileNameParameter, realFileSizeParameter, hashTypeIdParameter, hashValueParameter, lastAccessedUtcParameter, lastUpdatedUtcParameter, lastVerifiedUtcParameter);
        }
    
        public virtual ObjectResult<usp_Folder_Delete_Result> usp_Folder_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Folder_Delete_Result>("usp_Folder_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Folder_Insert_Result> usp_Folder_Insert(Nullable<System.Guid> fileSystemId, Nullable<System.Guid> parentId, string virtualName, Nullable<bool> isReadOnly, Nullable<System.Guid> creatorId)
        {
            var fileSystemIdParameter = fileSystemId.HasValue ?
                new ObjectParameter("FileSystemId", fileSystemId) :
                new ObjectParameter("FileSystemId", typeof(System.Guid));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("CreatorId", creatorId) :
                new ObjectParameter("CreatorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Folder_Insert_Result>("usp_Folder_Insert", fileSystemIdParameter, parentIdParameter, virtualNameParameter, isReadOnlyParameter, creatorIdParameter);
        }
    
        public virtual ObjectResult<usp_Folder_Update_Result> usp_Folder_Update(Nullable<System.Guid> id, Nullable<System.Guid> parentId, string virtualName, Nullable<bool> isReadOnly, Nullable<System.DateTimeOffset> lastAccessedUtc, Nullable<System.DateTimeOffset> lastUpdatedUtc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            var lastAccessedUtcParameter = lastAccessedUtc.HasValue ?
                new ObjectParameter("LastAccessedUtc", lastAccessedUtc) :
                new ObjectParameter("LastAccessedUtc", typeof(System.DateTimeOffset));
    
            var lastUpdatedUtcParameter = lastUpdatedUtc.HasValue ?
                new ObjectParameter("LastUpdatedUtc", lastUpdatedUtc) :
                new ObjectParameter("LastUpdatedUtc", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Folder_Update_Result>("usp_Folder_Update", idParameter, parentIdParameter, virtualNameParameter, isReadOnlyParameter, lastAccessedUtcParameter, lastUpdatedUtcParameter);
        }
    
        public virtual ObjectResult<usp_Mount_Delete_Result> usp_Mount_Delete(Nullable<System.Guid> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Mount_Delete_Result>("usp_Mount_Delete", userIdParameter);
        }
    
        public virtual ObjectResult<usp_Mount_Insert_Result> usp_Mount_Insert(Nullable<System.Guid> userId, Nullable<System.Guid> ambassadorId, string authType, string uncPath, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var ambassadorIdParameter = ambassadorId.HasValue ?
                new ObjectParameter("AmbassadorId", ambassadorId) :
                new ObjectParameter("AmbassadorId", typeof(System.Guid));
    
            var authTypeParameter = authType != null ?
                new ObjectParameter("AuthType", authType) :
                new ObjectParameter("AuthType", typeof(string));
    
            var uncPathParameter = uncPath != null ?
                new ObjectParameter("UncPath", uncPath) :
                new ObjectParameter("UncPath", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Mount_Insert_Result>("usp_Mount_Insert", userIdParameter, ambassadorIdParameter, authTypeParameter, uncPathParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Mount_Update_Result> usp_Mount_Update(Nullable<System.Guid> userId, Nullable<System.Guid> ambassadorId, string authType, string uncPath, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var ambassadorIdParameter = ambassadorId.HasValue ?
                new ObjectParameter("AmbassadorId", ambassadorId) :
                new ObjectParameter("AmbassadorId", typeof(System.Guid));
    
            var authTypeParameter = authType != null ?
                new ObjectParameter("AuthType", authType) :
                new ObjectParameter("AuthType", typeof(string));
    
            var uncPathParameter = uncPath != null ?
                new ObjectParameter("UncPath", uncPath) :
                new ObjectParameter("UncPath", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Mount_Update_Result>("usp_Mount_Update", userIdParameter, ambassadorIdParameter, authTypeParameter, uncPathParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual int usp_Session_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Session_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Session_Insert_Result> usp_Session_Insert(Nullable<System.Guid> userId, string callPath, string details, string localEndPoint, string localSoftwareIdentifier, string remoteEndPoint, string remoteSoftwareIdentifier, Nullable<bool> isActive)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var callPathParameter = callPath != null ?
                new ObjectParameter("CallPath", callPath) :
                new ObjectParameter("CallPath", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var localEndPointParameter = localEndPoint != null ?
                new ObjectParameter("LocalEndPoint", localEndPoint) :
                new ObjectParameter("LocalEndPoint", typeof(string));
    
            var localSoftwareIdentifierParameter = localSoftwareIdentifier != null ?
                new ObjectParameter("LocalSoftwareIdentifier", localSoftwareIdentifier) :
                new ObjectParameter("LocalSoftwareIdentifier", typeof(string));
    
            var remoteEndPointParameter = remoteEndPoint != null ?
                new ObjectParameter("RemoteEndPoint", remoteEndPoint) :
                new ObjectParameter("RemoteEndPoint", typeof(string));
    
            var remoteSoftwareIdentifierParameter = remoteSoftwareIdentifier != null ?
                new ObjectParameter("RemoteSoftwareIdentifier", remoteSoftwareIdentifier) :
                new ObjectParameter("RemoteSoftwareIdentifier", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Session_Insert_Result>("usp_Session_Insert", userIdParameter, callPathParameter, detailsParameter, localEndPointParameter, localSoftwareIdentifierParameter, remoteEndPointParameter, remoteSoftwareIdentifierParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_Session_Update_Result> usp_Session_Update(Nullable<System.Guid> id, string callPath, string details, string localEndPoint, string localSoftwareIdentifier, string remoteEndPoint, string remoteSoftwareIdentifier, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var callPathParameter = callPath != null ?
                new ObjectParameter("CallPath", callPath) :
                new ObjectParameter("CallPath", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var localEndPointParameter = localEndPoint != null ?
                new ObjectParameter("LocalEndPoint", localEndPoint) :
                new ObjectParameter("LocalEndPoint", typeof(string));
    
            var localSoftwareIdentifierParameter = localSoftwareIdentifier != null ?
                new ObjectParameter("LocalSoftwareIdentifier", localSoftwareIdentifier) :
                new ObjectParameter("LocalSoftwareIdentifier", typeof(string));
    
            var remoteEndPointParameter = remoteEndPoint != null ?
                new ObjectParameter("RemoteEndPoint", remoteEndPoint) :
                new ObjectParameter("RemoteEndPoint", typeof(string));
    
            var remoteSoftwareIdentifierParameter = remoteSoftwareIdentifier != null ?
                new ObjectParameter("RemoteSoftwareIdentifier", remoteSoftwareIdentifier) :
                new ObjectParameter("RemoteSoftwareIdentifier", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Session_Update_Result>("usp_Session_Update", idParameter, callPathParameter, detailsParameter, localEndPointParameter, localSoftwareIdentifierParameter, remoteEndPointParameter, remoteSoftwareIdentifierParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_LoginUsage_Update_Result> usp_LoginUsage_Update(Nullable<System.Guid> userId, Nullable<short> sessionMax, Nullable<short> sessionsInUse)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var sessionMaxParameter = sessionMax.HasValue ?
                new ObjectParameter("SessionMax", sessionMax) :
                new ObjectParameter("SessionMax", typeof(short));
    
            var sessionsInUseParameter = sessionsInUse.HasValue ?
                new ObjectParameter("SessionsInUse", sessionsInUse) :
                new ObjectParameter("SessionsInUse", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LoginUsage_Update_Result>("usp_LoginUsage_Update", userIdParameter, sessionMaxParameter, sessionsInUseParameter);
        }
    
        public virtual int usp_FileSystem_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FileSystem_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_FileSystem_Insert_Result> usp_FileSystem_Insert(Nullable<int> fileSystemTypeId, string name, string description, string uncPath, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var fileSystemTypeIdParameter = fileSystemTypeId.HasValue ?
                new ObjectParameter("FileSystemTypeId", fileSystemTypeId) :
                new ObjectParameter("FileSystemTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uncPathParameter = uncPath != null ?
                new ObjectParameter("UncPath", uncPath) :
                new ObjectParameter("UncPath", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FileSystem_Insert_Result>("usp_FileSystem_Insert", fileSystemTypeIdParameter, nameParameter, descriptionParameter, uncPathParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_FileSystem_Update_Result> usp_FileSystem_Update(Nullable<System.Guid> id, Nullable<int> fileSystemTypeId, string name, string description, string uncPath, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var fileSystemTypeIdParameter = fileSystemTypeId.HasValue ?
                new ObjectParameter("FileSystemTypeId", fileSystemTypeId) :
                new ObjectParameter("FileSystemTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uncPathParameter = uncPath != null ?
                new ObjectParameter("UncPath", uncPath) :
                new ObjectParameter("UncPath", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FileSystem_Update_Result>("usp_FileSystem_Update", idParameter, fileSystemTypeIdParameter, nameParameter, descriptionParameter, uncPathParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual int usp_FileSystemLogin_Delete(Nullable<System.Guid> fileSystemId, Nullable<System.Guid> userId)
        {
            var fileSystemIdParameter = fileSystemId.HasValue ?
                new ObjectParameter("FileSystemId", fileSystemId) :
                new ObjectParameter("FileSystemId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FileSystemLogin_Delete", fileSystemIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_FileSystemLogin_Insert_Result> usp_FileSystemLogin_Insert(Nullable<System.Guid> fileSystemId, Nullable<System.Guid> userId, Nullable<int> smbAuthTypeId, Nullable<System.Guid> ambassadorId, string chrootPath, Nullable<bool> isReadOnly)
        {
            var fileSystemIdParameter = fileSystemId.HasValue ?
                new ObjectParameter("FileSystemId", fileSystemId) :
                new ObjectParameter("FileSystemId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var smbAuthTypeIdParameter = smbAuthTypeId.HasValue ?
                new ObjectParameter("SmbAuthTypeId", smbAuthTypeId) :
                new ObjectParameter("SmbAuthTypeId", typeof(int));
    
            var ambassadorIdParameter = ambassadorId.HasValue ?
                new ObjectParameter("AmbassadorId", ambassadorId) :
                new ObjectParameter("AmbassadorId", typeof(System.Guid));
    
            var chrootPathParameter = chrootPath != null ?
                new ObjectParameter("ChrootPath", chrootPath) :
                new ObjectParameter("ChrootPath", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FileSystemLogin_Insert_Result>("usp_FileSystemLogin_Insert", fileSystemIdParameter, userIdParameter, smbAuthTypeIdParameter, ambassadorIdParameter, chrootPathParameter, isReadOnlyParameter);
        }
    
        public virtual ObjectResult<usp_FileSystemLogin_Update_Result> usp_FileSystemLogin_Update(Nullable<System.Guid> fileSystemId, Nullable<System.Guid> userId, Nullable<int> smbAuthTypeId, Nullable<System.Guid> ambassadorId, string chrootPath, Nullable<bool> isReadOnly)
        {
            var fileSystemIdParameter = fileSystemId.HasValue ?
                new ObjectParameter("FileSystemId", fileSystemId) :
                new ObjectParameter("FileSystemId", typeof(System.Guid));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var smbAuthTypeIdParameter = smbAuthTypeId.HasValue ?
                new ObjectParameter("SmbAuthTypeId", smbAuthTypeId) :
                new ObjectParameter("SmbAuthTypeId", typeof(int));
    
            var ambassadorIdParameter = ambassadorId.HasValue ?
                new ObjectParameter("AmbassadorId", ambassadorId) :
                new ObjectParameter("AmbassadorId", typeof(System.Guid));
    
            var chrootPathParameter = chrootPath != null ?
                new ObjectParameter("ChrootPath", chrootPath) :
                new ObjectParameter("ChrootPath", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FileSystemLogin_Update_Result>("usp_FileSystemLogin_Update", fileSystemIdParameter, userIdParameter, smbAuthTypeIdParameter, ambassadorIdParameter, chrootPathParameter, isReadOnlyParameter);
        }
    
        public virtual ObjectResult<usp_FileSystemUsage_Update_Result> usp_FileSystemUsage_Update(Nullable<System.Guid> fileSystemId, Nullable<long> quotaInBytes, Nullable<long> quotaUsedInBytes)
        {
            var fileSystemIdParameter = fileSystemId.HasValue ?
                new ObjectParameter("FileSystemId", fileSystemId) :
                new ObjectParameter("FileSystemId", typeof(System.Guid));
    
            var quotaInBytesParameter = quotaInBytes.HasValue ?
                new ObjectParameter("QuotaInBytes", quotaInBytes) :
                new ObjectParameter("QuotaInBytes", typeof(long));
    
            var quotaUsedInBytesParameter = quotaUsedInBytes.HasValue ?
                new ObjectParameter("QuotaUsedInBytes", quotaUsedInBytes) :
                new ObjectParameter("QuotaUsedInBytes", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FileSystemUsage_Update_Result>("usp_FileSystemUsage_Update", fileSystemIdParameter, quotaInBytesParameter, quotaUsedInBytesParameter);
        }
    
        public virtual int usp_Sessions_Delete(Nullable<System.Guid> userId, Nullable<System.DateTimeOffset> deleteBeforeDate, string localEndPoint, string remoteEndPoint)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var deleteBeforeDateParameter = deleteBeforeDate.HasValue ?
                new ObjectParameter("DeleteBeforeDate", deleteBeforeDate) :
                new ObjectParameter("DeleteBeforeDate", typeof(System.DateTimeOffset));
    
            var localEndPointParameter = localEndPoint != null ?
                new ObjectParameter("LocalEndPoint", localEndPoint) :
                new ObjectParameter("LocalEndPoint", typeof(string));
    
            var remoteEndPointParameter = remoteEndPoint != null ?
                new ObjectParameter("RemoteEndPoint", remoteEndPoint) :
                new ObjectParameter("RemoteEndPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Sessions_Delete", userIdParameter, deleteBeforeDateParameter, localEndPointParameter, remoteEndPointParameter);
        }
    }
}
