//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bhbk.Lib.Aurora.Data_EF6.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AuroraEntities : DbContext
    {
        public AuroraEntities()
            : base("name=AuroraEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Credential> Credentials { get; set; }
        public virtual DbSet<Network> Networks { get; set; }
        public virtual DbSet<PrivateKey> PrivateKeys { get; set; }
        public virtual DbSet<PublicKey> PublicKeys { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserAlert> UserAlerts { get; set; }
        public virtual DbSet<UserFile> UserFiles { get; set; }
        public virtual DbSet<UserFolder> UserFolders { get; set; }
        public virtual DbSet<UserMount> UserMounts { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
    
        public virtual ObjectResult<usp_Credential_Delete_Result> usp_Credential_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Credential_Delete_Result>("usp_Credential_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Credential_Insert_Result> usp_Credential_Insert(string domain, string userName, string encryptedPassword, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var domainParameter = domain != null ?
                new ObjectParameter("Domain", domain) :
                new ObjectParameter("Domain", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var encryptedPasswordParameter = encryptedPassword != null ?
                new ObjectParameter("EncryptedPassword", encryptedPassword) :
                new ObjectParameter("EncryptedPassword", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Credential_Insert_Result>("usp_Credential_Insert", domainParameter, userNameParameter, encryptedPasswordParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Credential_Update_Result> usp_Credential_Update(Nullable<System.Guid> id, string domain, string userName, string encryptedPassword, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var domainParameter = domain != null ?
                new ObjectParameter("Domain", domain) :
                new ObjectParameter("Domain", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var encryptedPasswordParameter = encryptedPassword != null ?
                new ObjectParameter("EncryptedPassword", encryptedPassword) :
                new ObjectParameter("EncryptedPassword", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Credential_Update_Result>("usp_Credential_Update", idParameter, domainParameter, userNameParameter, encryptedPasswordParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Network_Delete_Result> usp_Network_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Network_Delete_Result>("usp_Network_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Network_Insert_Result> usp_Network_Insert(Nullable<System.Guid> identityId, Nullable<int> sequenceId, string address, string action, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var sequenceIdParameter = sequenceId.HasValue ?
                new ObjectParameter("SequenceId", sequenceId) :
                new ObjectParameter("SequenceId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Network_Insert_Result>("usp_Network_Insert", identityIdParameter, sequenceIdParameter, addressParameter, actionParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Network_Update_Result> usp_Network_Update(Nullable<System.Guid> id, Nullable<System.Guid> identityId, Nullable<int> sequenceId, string address, string action, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var sequenceIdParameter = sequenceId.HasValue ?
                new ObjectParameter("SequenceId", sequenceId) :
                new ObjectParameter("SequenceId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Network_Update_Result>("usp_Network_Update", idParameter, identityIdParameter, sequenceIdParameter, addressParameter, actionParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_PrivateKey_Delete_Result> usp_PrivateKey_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrivateKey_Delete_Result>("usp_PrivateKey_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_PrivateKey_Insert_Result> usp_PrivateKey_Insert(Nullable<System.Guid> id, Nullable<System.Guid> identityId, Nullable<System.Guid> publicKeyId, string keyValue, string keyAlgo, string keyPass, string keyFormat, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var publicKeyIdParameter = publicKeyId.HasValue ?
                new ObjectParameter("PublicKeyId", publicKeyId) :
                new ObjectParameter("PublicKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgoParameter = keyAlgo != null ?
                new ObjectParameter("KeyAlgo", keyAlgo) :
                new ObjectParameter("KeyAlgo", typeof(string));
    
            var keyPassParameter = keyPass != null ?
                new ObjectParameter("KeyPass", keyPass) :
                new ObjectParameter("KeyPass", typeof(string));
    
            var keyFormatParameter = keyFormat != null ?
                new ObjectParameter("KeyFormat", keyFormat) :
                new ObjectParameter("KeyFormat", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrivateKey_Insert_Result>("usp_PrivateKey_Insert", idParameter, identityIdParameter, publicKeyIdParameter, keyValueParameter, keyAlgoParameter, keyPassParameter, keyFormatParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_PrivateKey_Update_Result> usp_PrivateKey_Update(Nullable<System.Guid> id, Nullable<System.Guid> identityId, Nullable<System.Guid> publicKeyId, string keyValue, string keyAlgo, string keyPass, string keyFormat, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var publicKeyIdParameter = publicKeyId.HasValue ?
                new ObjectParameter("PublicKeyId", publicKeyId) :
                new ObjectParameter("PublicKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgoParameter = keyAlgo != null ?
                new ObjectParameter("KeyAlgo", keyAlgo) :
                new ObjectParameter("KeyAlgo", typeof(string));
    
            var keyPassParameter = keyPass != null ?
                new ObjectParameter("KeyPass", keyPass) :
                new ObjectParameter("KeyPass", typeof(string));
    
            var keyFormatParameter = keyFormat != null ?
                new ObjectParameter("KeyFormat", keyFormat) :
                new ObjectParameter("KeyFormat", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrivateKey_Update_Result>("usp_PrivateKey_Update", idParameter, identityIdParameter, publicKeyIdParameter, keyValueParameter, keyAlgoParameter, keyPassParameter, keyFormatParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_PublicKey_Delete_Result> usp_PublicKey_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PublicKey_Delete_Result>("usp_PublicKey_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_PublicKey_Insert_Result> usp_PublicKey_Insert(Nullable<System.Guid> id, Nullable<System.Guid> identityId, Nullable<System.Guid> privateKeyId, string keyValue, string keyAlgo, string keyFormat, string sigValue, string sigAlgo, string comment, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var privateKeyIdParameter = privateKeyId.HasValue ?
                new ObjectParameter("PrivateKeyId", privateKeyId) :
                new ObjectParameter("PrivateKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgoParameter = keyAlgo != null ?
                new ObjectParameter("KeyAlgo", keyAlgo) :
                new ObjectParameter("KeyAlgo", typeof(string));
    
            var keyFormatParameter = keyFormat != null ?
                new ObjectParameter("KeyFormat", keyFormat) :
                new ObjectParameter("KeyFormat", typeof(string));
    
            var sigValueParameter = sigValue != null ?
                new ObjectParameter("SigValue", sigValue) :
                new ObjectParameter("SigValue", typeof(string));
    
            var sigAlgoParameter = sigAlgo != null ?
                new ObjectParameter("SigAlgo", sigAlgo) :
                new ObjectParameter("SigAlgo", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PublicKey_Insert_Result>("usp_PublicKey_Insert", idParameter, identityIdParameter, privateKeyIdParameter, keyValueParameter, keyAlgoParameter, keyFormatParameter, sigValueParameter, sigAlgoParameter, commentParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_PublicKey_Update_Result> usp_PublicKey_Update(Nullable<System.Guid> id, Nullable<System.Guid> identityId, Nullable<System.Guid> privateKeyId, string keyValue, string keyAlgo, string keyFormat, string sigValue, string sigAlgo, string comment, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var privateKeyIdParameter = privateKeyId.HasValue ?
                new ObjectParameter("PrivateKeyId", privateKeyId) :
                new ObjectParameter("PrivateKeyId", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var keyAlgoParameter = keyAlgo != null ?
                new ObjectParameter("KeyAlgo", keyAlgo) :
                new ObjectParameter("KeyAlgo", typeof(string));
    
            var keyFormatParameter = keyFormat != null ?
                new ObjectParameter("KeyFormat", keyFormat) :
                new ObjectParameter("KeyFormat", typeof(string));
    
            var sigValueParameter = sigValue != null ?
                new ObjectParameter("SigValue", sigValue) :
                new ObjectParameter("SigValue", typeof(string));
    
            var sigAlgoParameter = sigAlgo != null ?
                new ObjectParameter("SigAlgo", sigAlgo) :
                new ObjectParameter("SigAlgo", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PublicKey_Update_Result>("usp_PublicKey_Update", idParameter, identityIdParameter, privateKeyIdParameter, keyValueParameter, keyAlgoParameter, keyFormatParameter, sigValueParameter, sigAlgoParameter, commentParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Setting_Delete_Result> usp_Setting_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Setting_Delete_Result>("usp_Setting_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Setting_Insert_Result> usp_Setting_Insert(Nullable<System.Guid> identityId, string configKey, string configValue, Nullable<bool> isDeletable)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var configKeyParameter = configKey != null ?
                new ObjectParameter("ConfigKey", configKey) :
                new ObjectParameter("ConfigKey", typeof(string));
    
            var configValueParameter = configValue != null ?
                new ObjectParameter("ConfigValue", configValue) :
                new ObjectParameter("ConfigValue", typeof(string));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Setting_Insert_Result>("usp_Setting_Insert", identityIdParameter, configKeyParameter, configValueParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_Setting_Update_Result> usp_Setting_Update(Nullable<System.Guid> id, Nullable<System.Guid> identityId, string configKey, string configValue, Nullable<bool> isDeletable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var configKeyParameter = configKey != null ?
                new ObjectParameter("ConfigKey", configKey) :
                new ObjectParameter("ConfigKey", typeof(string));
    
            var configValueParameter = configValue != null ?
                new ObjectParameter("ConfigValue", configValue) :
                new ObjectParameter("ConfigValue", typeof(string));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Setting_Update_Result>("usp_Setting_Update", idParameter, identityIdParameter, configKeyParameter, configValueParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_User_Delete_Result> usp_User_Delete(Nullable<System.Guid> identityId)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_Delete_Result>("usp_User_Delete", identityIdParameter);
        }
    
        public virtual ObjectResult<usp_User_Insert_Result> usp_User_Insert(Nullable<System.Guid> identityId, string identityAlias, string fileSystemType, Nullable<bool> isPasswordRequired, Nullable<bool> isPublicKeyRequired, Nullable<bool> isFileSystemReadOnly, string debugger, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var identityAliasParameter = identityAlias != null ?
                new ObjectParameter("IdentityAlias", identityAlias) :
                new ObjectParameter("IdentityAlias", typeof(string));
    
            var fileSystemTypeParameter = fileSystemType != null ?
                new ObjectParameter("FileSystemType", fileSystemType) :
                new ObjectParameter("FileSystemType", typeof(string));
    
            var isPasswordRequiredParameter = isPasswordRequired.HasValue ?
                new ObjectParameter("IsPasswordRequired", isPasswordRequired) :
                new ObjectParameter("IsPasswordRequired", typeof(bool));
    
            var isPublicKeyRequiredParameter = isPublicKeyRequired.HasValue ?
                new ObjectParameter("IsPublicKeyRequired", isPublicKeyRequired) :
                new ObjectParameter("IsPublicKeyRequired", typeof(bool));
    
            var isFileSystemReadOnlyParameter = isFileSystemReadOnly.HasValue ?
                new ObjectParameter("IsFileSystemReadOnly", isFileSystemReadOnly) :
                new ObjectParameter("IsFileSystemReadOnly", typeof(bool));
    
            var debuggerParameter = debugger != null ?
                new ObjectParameter("Debugger", debugger) :
                new ObjectParameter("Debugger", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_Insert_Result>("usp_User_Insert", identityIdParameter, identityAliasParameter, fileSystemTypeParameter, isPasswordRequiredParameter, isPublicKeyRequiredParameter, isFileSystemReadOnlyParameter, debuggerParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_User_Update_Result> usp_User_Update(Nullable<System.Guid> identityId, string identityAlias, string fileSystemType, string fileSystemChrootPath, Nullable<bool> isPasswordRequired, Nullable<bool> isPublicKeyRequired, Nullable<bool> isFileSystemReadOnly, Nullable<long> quotaInBytes, Nullable<long> quotaUsedInBytes, Nullable<short> sessionMax, Nullable<short> sessionsInUse, string debugger, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var identityAliasParameter = identityAlias != null ?
                new ObjectParameter("IdentityAlias", identityAlias) :
                new ObjectParameter("IdentityAlias", typeof(string));
    
            var fileSystemTypeParameter = fileSystemType != null ?
                new ObjectParameter("FileSystemType", fileSystemType) :
                new ObjectParameter("FileSystemType", typeof(string));
    
            var fileSystemChrootPathParameter = fileSystemChrootPath != null ?
                new ObjectParameter("FileSystemChrootPath", fileSystemChrootPath) :
                new ObjectParameter("FileSystemChrootPath", typeof(string));
    
            var isPasswordRequiredParameter = isPasswordRequired.HasValue ?
                new ObjectParameter("IsPasswordRequired", isPasswordRequired) :
                new ObjectParameter("IsPasswordRequired", typeof(bool));
    
            var isPublicKeyRequiredParameter = isPublicKeyRequired.HasValue ?
                new ObjectParameter("IsPublicKeyRequired", isPublicKeyRequired) :
                new ObjectParameter("IsPublicKeyRequired", typeof(bool));
    
            var isFileSystemReadOnlyParameter = isFileSystemReadOnly.HasValue ?
                new ObjectParameter("IsFileSystemReadOnly", isFileSystemReadOnly) :
                new ObjectParameter("IsFileSystemReadOnly", typeof(bool));
    
            var quotaInBytesParameter = quotaInBytes.HasValue ?
                new ObjectParameter("QuotaInBytes", quotaInBytes) :
                new ObjectParameter("QuotaInBytes", typeof(long));
    
            var quotaUsedInBytesParameter = quotaUsedInBytes.HasValue ?
                new ObjectParameter("QuotaUsedInBytes", quotaUsedInBytes) :
                new ObjectParameter("QuotaUsedInBytes", typeof(long));
    
            var sessionMaxParameter = sessionMax.HasValue ?
                new ObjectParameter("SessionMax", sessionMax) :
                new ObjectParameter("SessionMax", typeof(short));
    
            var sessionsInUseParameter = sessionsInUse.HasValue ?
                new ObjectParameter("SessionsInUse", sessionsInUse) :
                new ObjectParameter("SessionsInUse", typeof(short));
    
            var debuggerParameter = debugger != null ?
                new ObjectParameter("Debugger", debugger) :
                new ObjectParameter("Debugger", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_Update_Result>("usp_User_Update", identityIdParameter, identityAliasParameter, fileSystemTypeParameter, fileSystemChrootPathParameter, isPasswordRequiredParameter, isPublicKeyRequiredParameter, isFileSystemReadOnlyParameter, quotaInBytesParameter, quotaUsedInBytesParameter, sessionMaxParameter, sessionsInUseParameter, debuggerParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_UserAlert_Delete_Result> usp_UserAlert_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserAlert_Delete_Result>("usp_UserAlert_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_UserAlert_Insert_Result> usp_UserAlert_Insert(Nullable<System.Guid> identityId, Nullable<bool> onDelete, Nullable<bool> onDownload, Nullable<bool> onUpload, string toDisplayName, string toEmailAddress, string toPhoneNumber, Nullable<bool> isEnabled)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var onDeleteParameter = onDelete.HasValue ?
                new ObjectParameter("OnDelete", onDelete) :
                new ObjectParameter("OnDelete", typeof(bool));
    
            var onDownloadParameter = onDownload.HasValue ?
                new ObjectParameter("OnDownload", onDownload) :
                new ObjectParameter("OnDownload", typeof(bool));
    
            var onUploadParameter = onUpload.HasValue ?
                new ObjectParameter("OnUpload", onUpload) :
                new ObjectParameter("OnUpload", typeof(bool));
    
            var toDisplayNameParameter = toDisplayName != null ?
                new ObjectParameter("ToDisplayName", toDisplayName) :
                new ObjectParameter("ToDisplayName", typeof(string));
    
            var toEmailAddressParameter = toEmailAddress != null ?
                new ObjectParameter("ToEmailAddress", toEmailAddress) :
                new ObjectParameter("ToEmailAddress", typeof(string));
    
            var toPhoneNumberParameter = toPhoneNumber != null ?
                new ObjectParameter("ToPhoneNumber", toPhoneNumber) :
                new ObjectParameter("ToPhoneNumber", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserAlert_Insert_Result>("usp_UserAlert_Insert", identityIdParameter, onDeleteParameter, onDownloadParameter, onUploadParameter, toDisplayNameParameter, toEmailAddressParameter, toPhoneNumberParameter, isEnabledParameter);
        }
    
        public virtual ObjectResult<usp_UserAlert_Update_Result> usp_UserAlert_Update(Nullable<System.Guid> id, Nullable<System.Guid> identityId, Nullable<bool> onDelete, Nullable<bool> onDownload, Nullable<bool> onUpload, string toDisplayName, string toEmailAddress, string toPhoneNumber, Nullable<bool> isEnabled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var onDeleteParameter = onDelete.HasValue ?
                new ObjectParameter("OnDelete", onDelete) :
                new ObjectParameter("OnDelete", typeof(bool));
    
            var onDownloadParameter = onDownload.HasValue ?
                new ObjectParameter("OnDownload", onDownload) :
                new ObjectParameter("OnDownload", typeof(bool));
    
            var onUploadParameter = onUpload.HasValue ?
                new ObjectParameter("OnUpload", onUpload) :
                new ObjectParameter("OnUpload", typeof(bool));
    
            var toDisplayNameParameter = toDisplayName != null ?
                new ObjectParameter("ToDisplayName", toDisplayName) :
                new ObjectParameter("ToDisplayName", typeof(string));
    
            var toEmailAddressParameter = toEmailAddress != null ?
                new ObjectParameter("ToEmailAddress", toEmailAddress) :
                new ObjectParameter("ToEmailAddress", typeof(string));
    
            var toPhoneNumberParameter = toPhoneNumber != null ?
                new ObjectParameter("ToPhoneNumber", toPhoneNumber) :
                new ObjectParameter("ToPhoneNumber", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserAlert_Update_Result>("usp_UserAlert_Update", idParameter, identityIdParameter, onDeleteParameter, onDownloadParameter, onUploadParameter, toDisplayNameParameter, toEmailAddressParameter, toPhoneNumberParameter, isEnabledParameter);
        }
    
        public virtual ObjectResult<usp_UserFile_Delete_Result> usp_UserFile_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserFile_Delete_Result>("usp_UserFile_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_UserFile_Insert_Result> usp_UserFile_Insert(Nullable<System.Guid> identityId, Nullable<System.Guid> folderId, string virtualName, Nullable<bool> isReadOnly, string realPath, string realFileName, Nullable<long> realFileSize, string hashSHA256)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            var realPathParameter = realPath != null ?
                new ObjectParameter("RealPath", realPath) :
                new ObjectParameter("RealPath", typeof(string));
    
            var realFileNameParameter = realFileName != null ?
                new ObjectParameter("RealFileName", realFileName) :
                new ObjectParameter("RealFileName", typeof(string));
    
            var realFileSizeParameter = realFileSize.HasValue ?
                new ObjectParameter("RealFileSize", realFileSize) :
                new ObjectParameter("RealFileSize", typeof(long));
    
            var hashSHA256Parameter = hashSHA256 != null ?
                new ObjectParameter("HashSHA256", hashSHA256) :
                new ObjectParameter("HashSHA256", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserFile_Insert_Result>("usp_UserFile_Insert", identityIdParameter, folderIdParameter, virtualNameParameter, isReadOnlyParameter, realPathParameter, realFileNameParameter, realFileSizeParameter, hashSHA256Parameter);
        }
    
        public virtual ObjectResult<usp_UserFile_Update_Result> usp_UserFile_Update(Nullable<System.Guid> id, Nullable<System.Guid> folderId, Nullable<System.Guid> identityId, string virtualName, Nullable<bool> isReadOnly, string realPath, string realFileName, Nullable<long> realFileSize, string hashSHA256, Nullable<System.DateTimeOffset> lastAccessedUtc, Nullable<System.DateTimeOffset> lastUpdatedUtc, Nullable<System.DateTimeOffset> lastVerifiedUtc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            var realPathParameter = realPath != null ?
                new ObjectParameter("RealPath", realPath) :
                new ObjectParameter("RealPath", typeof(string));
    
            var realFileNameParameter = realFileName != null ?
                new ObjectParameter("RealFileName", realFileName) :
                new ObjectParameter("RealFileName", typeof(string));
    
            var realFileSizeParameter = realFileSize.HasValue ?
                new ObjectParameter("RealFileSize", realFileSize) :
                new ObjectParameter("RealFileSize", typeof(long));
    
            var hashSHA256Parameter = hashSHA256 != null ?
                new ObjectParameter("HashSHA256", hashSHA256) :
                new ObjectParameter("HashSHA256", typeof(string));
    
            var lastAccessedUtcParameter = lastAccessedUtc.HasValue ?
                new ObjectParameter("LastAccessedUtc", lastAccessedUtc) :
                new ObjectParameter("LastAccessedUtc", typeof(System.DateTimeOffset));
    
            var lastUpdatedUtcParameter = lastUpdatedUtc.HasValue ?
                new ObjectParameter("LastUpdatedUtc", lastUpdatedUtc) :
                new ObjectParameter("LastUpdatedUtc", typeof(System.DateTimeOffset));
    
            var lastVerifiedUtcParameter = lastVerifiedUtc.HasValue ?
                new ObjectParameter("LastVerifiedUtc", lastVerifiedUtc) :
                new ObjectParameter("LastVerifiedUtc", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserFile_Update_Result>("usp_UserFile_Update", idParameter, folderIdParameter, identityIdParameter, virtualNameParameter, isReadOnlyParameter, realPathParameter, realFileNameParameter, realFileSizeParameter, hashSHA256Parameter, lastAccessedUtcParameter, lastUpdatedUtcParameter, lastVerifiedUtcParameter);
        }
    
        public virtual ObjectResult<usp_UserFolder_Delete_Result> usp_UserFolder_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserFolder_Delete_Result>("usp_UserFolder_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_UserFolder_Insert_Result> usp_UserFolder_Insert(Nullable<System.Guid> identityId, Nullable<System.Guid> parentId, string virtualName, Nullable<bool> isReadOnly)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserFolder_Insert_Result>("usp_UserFolder_Insert", identityIdParameter, parentIdParameter, virtualNameParameter, isReadOnlyParameter);
        }
    
        public virtual ObjectResult<usp_UserFolder_Update_Result> usp_UserFolder_Update(Nullable<System.Guid> id, Nullable<System.Guid> identityId, Nullable<System.Guid> parentId, string virtualName, Nullable<bool> isReadOnly, Nullable<System.DateTimeOffset> lastAccessedUtc, Nullable<System.DateTimeOffset> lastUpdatedUtc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(System.Guid));
    
            var virtualNameParameter = virtualName != null ?
                new ObjectParameter("VirtualName", virtualName) :
                new ObjectParameter("VirtualName", typeof(string));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            var lastAccessedUtcParameter = lastAccessedUtc.HasValue ?
                new ObjectParameter("LastAccessedUtc", lastAccessedUtc) :
                new ObjectParameter("LastAccessedUtc", typeof(System.DateTimeOffset));
    
            var lastUpdatedUtcParameter = lastUpdatedUtc.HasValue ?
                new ObjectParameter("LastUpdatedUtc", lastUpdatedUtc) :
                new ObjectParameter("LastUpdatedUtc", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserFolder_Update_Result>("usp_UserFolder_Update", idParameter, identityIdParameter, parentIdParameter, virtualNameParameter, isReadOnlyParameter, lastAccessedUtcParameter, lastUpdatedUtcParameter);
        }
    
        public virtual ObjectResult<usp_UserMount_Delete_Result> usp_UserMount_Delete(Nullable<System.Guid> identityId)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserMount_Delete_Result>("usp_UserMount_Delete", identityIdParameter);
        }
    
        public virtual ObjectResult<usp_UserMount_Insert_Result> usp_UserMount_Insert(Nullable<System.Guid> identityId, Nullable<System.Guid> credentialId, string authType, string serverAddress, string serverShare, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var credentialIdParameter = credentialId.HasValue ?
                new ObjectParameter("CredentialId", credentialId) :
                new ObjectParameter("CredentialId", typeof(System.Guid));
    
            var authTypeParameter = authType != null ?
                new ObjectParameter("AuthType", authType) :
                new ObjectParameter("AuthType", typeof(string));
    
            var serverAddressParameter = serverAddress != null ?
                new ObjectParameter("ServerAddress", serverAddress) :
                new ObjectParameter("ServerAddress", typeof(string));
    
            var serverShareParameter = serverShare != null ?
                new ObjectParameter("ServerShare", serverShare) :
                new ObjectParameter("ServerShare", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserMount_Insert_Result>("usp_UserMount_Insert", identityIdParameter, credentialIdParameter, authTypeParameter, serverAddressParameter, serverShareParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual ObjectResult<usp_UserMount_Update_Result> usp_UserMount_Update(Nullable<System.Guid> identityId, Nullable<System.Guid> credentialId, string authType, string serverAddress, string serverShare, Nullable<bool> isEnabled, Nullable<bool> isDeletable)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var credentialIdParameter = credentialId.HasValue ?
                new ObjectParameter("CredentialId", credentialId) :
                new ObjectParameter("CredentialId", typeof(System.Guid));
    
            var authTypeParameter = authType != null ?
                new ObjectParameter("AuthType", authType) :
                new ObjectParameter("AuthType", typeof(string));
    
            var serverAddressParameter = serverAddress != null ?
                new ObjectParameter("ServerAddress", serverAddress) :
                new ObjectParameter("ServerAddress", typeof(string));
    
            var serverShareParameter = serverShare != null ?
                new ObjectParameter("ServerShare", serverShare) :
                new ObjectParameter("ServerShare", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isDeletableParameter = isDeletable.HasValue ?
                new ObjectParameter("IsDeletable", isDeletable) :
                new ObjectParameter("IsDeletable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserMount_Update_Result>("usp_UserMount_Update", identityIdParameter, credentialIdParameter, authTypeParameter, serverAddressParameter, serverShareParameter, isEnabledParameter, isDeletableParameter);
        }
    
        public virtual int usp_Session_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Session_Delete", idParameter);
        }
    
        public virtual ObjectResult<usp_Session_Insert_Result> usp_Session_Insert(Nullable<System.Guid> identityId, string callPath, string details, string localEndPoint, string localSoftwareIdentifier, string remoteEndPoint, string remoteSoftwareIdentifier, Nullable<bool> isActive)
        {
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var callPathParameter = callPath != null ?
                new ObjectParameter("CallPath", callPath) :
                new ObjectParameter("CallPath", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var localEndPointParameter = localEndPoint != null ?
                new ObjectParameter("LocalEndPoint", localEndPoint) :
                new ObjectParameter("LocalEndPoint", typeof(string));
    
            var localSoftwareIdentifierParameter = localSoftwareIdentifier != null ?
                new ObjectParameter("LocalSoftwareIdentifier", localSoftwareIdentifier) :
                new ObjectParameter("LocalSoftwareIdentifier", typeof(string));
    
            var remoteEndPointParameter = remoteEndPoint != null ?
                new ObjectParameter("RemoteEndPoint", remoteEndPoint) :
                new ObjectParameter("RemoteEndPoint", typeof(string));
    
            var remoteSoftwareIdentifierParameter = remoteSoftwareIdentifier != null ?
                new ObjectParameter("RemoteSoftwareIdentifier", remoteSoftwareIdentifier) :
                new ObjectParameter("RemoteSoftwareIdentifier", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Session_Insert_Result>("usp_Session_Insert", identityIdParameter, callPathParameter, detailsParameter, localEndPointParameter, localSoftwareIdentifierParameter, remoteEndPointParameter, remoteSoftwareIdentifierParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_Session_Update_Result> usp_Session_Update(Nullable<System.Guid> id, Nullable<System.Guid> identityId, string callPath, string details, string localEndPoint, string localSoftwareIdentifier, string remoteEndPoint, string remoteSoftwareIdentifier, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var identityIdParameter = identityId.HasValue ?
                new ObjectParameter("IdentityId", identityId) :
                new ObjectParameter("IdentityId", typeof(System.Guid));
    
            var callPathParameter = callPath != null ?
                new ObjectParameter("CallPath", callPath) :
                new ObjectParameter("CallPath", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var localEndPointParameter = localEndPoint != null ?
                new ObjectParameter("LocalEndPoint", localEndPoint) :
                new ObjectParameter("LocalEndPoint", typeof(string));
    
            var localSoftwareIdentifierParameter = localSoftwareIdentifier != null ?
                new ObjectParameter("LocalSoftwareIdentifier", localSoftwareIdentifier) :
                new ObjectParameter("LocalSoftwareIdentifier", typeof(string));
    
            var remoteEndPointParameter = remoteEndPoint != null ?
                new ObjectParameter("RemoteEndPoint", remoteEndPoint) :
                new ObjectParameter("RemoteEndPoint", typeof(string));
    
            var remoteSoftwareIdentifierParameter = remoteSoftwareIdentifier != null ?
                new ObjectParameter("RemoteSoftwareIdentifier", remoteSoftwareIdentifier) :
                new ObjectParameter("RemoteSoftwareIdentifier", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Session_Update_Result>("usp_Session_Update", idParameter, identityIdParameter, callPathParameter, detailsParameter, localEndPointParameter, localSoftwareIdentifierParameter, remoteEndPointParameter, remoteSoftwareIdentifierParameter, isActiveParameter);
        }
    }
}
